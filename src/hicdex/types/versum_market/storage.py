# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Extra


class CurrencyItem(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Token(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Auctions(BaseModel):
    class Config:
        extra = Extra.forbid

    bid_amount: str
    bidder: str
    currency: Optional[CurrencyItem]
    end_timestamp: str
    require_verified: bool
    seller: str
    token: Token
    token_amount: str


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class CollectedFa2Fee(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: str


class Key1(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Fa2Fee(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key1
    value: str


class LastCollectOp(BaseModel):
    class Config:
        extra = Extra.forbid

    level: str
    source: str


class CurrencyItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Token1(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Offers(BaseModel):
    class Config:
        extra = Extra.forbid

    buyer: str
    currency: Optional[CurrencyItem1]
    price_in_nat: str
    require_verified: bool
    token: Token1
    token_amount: str


class CurrencyItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Token2(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Swaps(BaseModel):
    class Config:
        extra = Extra.forbid

    burn_on_end: bool
    collect_max_per_tx: str
    currency: Optional[CurrencyItem2]
    ending_price_in_nat: str
    ending_time: Optional[str]
    require_verified: bool
    seller: str
    starting_price_in_nat: str
    token: Token2
    token_left_amount: str
    token_start_amount: str


class VersumMarketStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_check_lambda: str
    administrator: str
    auction_counter: str
    auctions: Dict[str, Auctions]
    big_map: Dict[str, str]
    collected_fa2_fees: List[CollectedFa2Fee]
    collected_xtz_fees: str
    contract_registry: str
    default_fa2_fee: str
    default_platform_fee: str
    default_xtz_fee: str
    deprecated: bool
    extra_db: Dict[str, str]
    fa2_fees: List[Fa2Fee]
    fee_per_platform: Dict[str, str]
    identity: str
    last_collect_op: LastCollectOp
    max_fee: str
    metadata: Dict[str, str]
    min_fee: str
    offer_counter: str
    offers: Dict[str, Offers]
    paused: bool
    royalty_adapter: str
    swap_counter: str
    swaps: Dict[str, Swaps]
